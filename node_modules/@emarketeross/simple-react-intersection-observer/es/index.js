function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import Observer from 'react-intersection-observer';

var ObserverWrapper = function (_Component) {
    _inherits(ObserverWrapper, _Component);

    function ObserverWrapper() {
        _classCallCheck(this, ObserverWrapper);

        var _this = _possibleConstructorReturn(this, _Component.call(this));

        _this.useObserver = global.__SERVER__ || 'IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype && 'isIntersecting' in window.IntersectionObserverEntry.prototype;
        return _this;
    }

    ObserverWrapper.prototype.inViewRender = function inViewRender(inView) {
        if (inView) {
            return this.props.children;
        } else {
            return null;
        }
    };

    ObserverWrapper.prototype.render = function render() {
        if (!this.useObserver) {
            return React.createElement(
                'div',
                null,
                this.props.children
            );
        }

        return React.createElement(
            Observer,
            { triggerOnce: true },
            this.inViewRender.bind(this)
        );
    };

    return ObserverWrapper;
}(Component);

export { ObserverWrapper as default };